#include <WiFiManager.h>
#include <ESPAsyncWebServer.h>

WiFiManager wm;  // T·∫°o WiFiManager
AsyncWebServer server(80);  // T·∫°o Web Server tr√™n c·ªïng 80

void setup() {
    Serial.begin(115200);

    // Ki·ªÉm tra n·∫øu c√≥ WiFi ƒë√£ l∆∞u th√¨ k·∫øt n·ªëi
    if (!wm.autoConnect("ESP32-Config")) {
        Serial.println("‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi WiFi!");
        ESP.restart();
    } else {
        Serial.println("‚úÖ K·∫øt n·ªëi WiFi th√†nh c√¥ng!");
    }

    // üñ• T·∫°o trang web ch√≠nh v·ªõi ti√™u ƒë·ªÅ (Title)
    server.on("/", HTTP_GET, [](AsyncWebServerRequest *request) {
        // L·∫•y ƒë·ªãa ch·ªâ IP c·ªßa ESP32
        String ipAddress = WiFi.localIP().toString();

        // T·∫°o HTML hi·ªÉn th·ªã ƒë·ªãa ch·ªâ IP
        String html = "<!DOCTYPE html><html><head>";
        html += "<title>ESP32 WiFi Manager</title>";  // Ti√™u ƒë·ªÅ tr√™n tab tr√¨nh duy·ªát
        html += "<meta name='viewport' content='width=device-width, initial-scale=1.0'>";
        html += "<style> body { font-family: Arial, sans-serif; text-align: center; } ";
        html += "button { padding: 10px 20px; margin: 10px; border: none; cursor: pointer; } ";
        html += ".reset { background: red; color: white; } ";
        html += ".disconnect { background: orange; color: white; } ";
        html += "</style></head><body>";
        html += "<h2>ESP32 WiFi Manager</h2>";
        html += "<p><b>IP Address:</b> " + ipAddress + "</p>";  // Hi·ªÉn th·ªã ƒë·ªãa ch·ªâ IP
        html += "<p><b>SSID:</b> " + WiFi.SSID() + "</p>";
        html += "<p><button class='reset' onclick=\"window.location.href='/reset'\">Reset WiFi</button></p>";
        html += "<p><button class='disconnect' onclick=\"window.location.href='/disconnect'\">Ng·∫Øt K·∫øt N·ªëi WiFi</button></p>";
        html += "</body></html>";

        // G·ª≠i trang web v·ªõi th√¥ng tin Wi-Fi v√† ƒë·ªãa ch·ªâ IP
        request->send(200, "text/html", html);
    });

    // üîÑ API Reset WiFi (X√≥a WiFi ƒë√£ l∆∞u)
    server.on("/reset", HTTP_GET, [](AsyncWebServerRequest *request) {
        request->send(200, "text/plain", "üõë ƒêa reset WiFi! ESP32 se khoi ƒëong lai...");
        wm.resetSettings();  // X√≥a WiFi ƒë√£ l∆∞u
        delay(1000);
        ESP.restart();  // Kh·ªüi ƒë·ªông l·∫°i ESP ƒë·ªÉ nh·∫≠p WiFi m·ªõi
    });

    // üîå API Ng·∫Øt K·∫øt N·ªëi WiFi (M·∫•t k·∫øt n·ªëi nh∆∞ng kh√¥ng reset)
    server.on("/disconnect", HTTP_GET, [](AsyncWebServerRequest *request) {
        request->send(200, "text/plain", "‚ö†Ô∏è Da ngat ket noi thanh cong WiFi!");
        WiFi.disconnect(true, true);  // Ng·∫Øt k·∫øt n·ªëi WiFi nh∆∞ng kh√¥ng reset
    });

    server.begin();  // B·∫Øt ƒë·∫ßu Web Server
}

void loop() {}
